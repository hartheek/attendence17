{"ast":null,"code":"'use strict';\n\nvar net = require('net');\n\n/**\n * Constructor\n * @param {Object} httpAdapter Http Adapter\n * @param {Object} options     Options (language, client_id, client_secret)\n */\nvar AGOLGeocoder = function AGOLGeocoder(httpAdapter, options) {\n  if (!httpAdapter || httpAdapter == 'undefined') {\n    throw new Error('ArcGis Online Geocoder requires a httpAdapter to be defined');\n  }\n  if (!options || options == 'undefined') {\n    options = {};\n  }\n  if (!options.client_id || options.client_id == 'undefined') {\n    options.client_id = null;\n  }\n  if (!options.client_secret || options.client_secret == 'undefined') {\n    options.client_secret = null;\n  }\n  if (!options.client_secret || !options.client_id) {\n    throw new Error('You must specify the client_id and the client_secret');\n  }\n  this.options = options;\n  this.httpAdapter = httpAdapter;\n  this.cache = {};\n};\nAGOLGeocoder.prototype._authEndpoint = 'https://www.arcgis.com/sharing/oauth2/token';\nAGOLGeocoder.prototype._endpoint = 'http://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/find';\nAGOLGeocoder.prototype._reverseEndpoint = 'http://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/reverseGeocode';\n\n//Cached vars\n\nAGOLGeocoder.prototype._cachedToken = {\n  'now': function () {\n    return new Date().getTime();\n  },\n  'put': function (token, experation, cache) {\n    cache.token = token;\n    //Shave 30 secs off experation to ensure that we expire slightly before the actual expiration\n    cache.tokenExp = this.now() + (experation - 30);\n  },\n  'get': function (cache) {\n    if (!cache) {\n      return null;\n    }\n    if (this.now() <= cache.tokenExp) {\n      return cache.token;\n    } else {\n      return null;\n    }\n  }\n};\nAGOLGeocoder.prototype._getToken = function (callback) {\n  var _this = this;\n  if (_this._cachedToken.get(_this.cache) !== null) {\n    callback(_this._cachedToken.get());\n    return;\n  }\n  var params = {\n    'grant_type': 'client_credentials',\n    'client_id': _this.options.client_id,\n    'client_secret': _this.options.client_secret\n  };\n  _this.httpAdapter.get(_this._authEndpoint, params, function (err, result) {\n    if (err) {\n      return callback(err);\n    } else {\n      result = JSON.parse(result);\n      var tokenExpiration = new Date().getTime() + result.expires_in;\n      var token = result.access_token;\n      _this._cachedToken.put(token, tokenExpiration, _this.cache);\n      callback(false, token);\n    }\n  });\n};\n\n/**\n * Geocode\n * @param {String}   value    Value to geocode (Address)\n * @param {Function} callback Callback method\n */\nAGOLGeocoder.prototype.geocode = function (value, callback) {\n  var _this = this;\n  if (net.isIP(value)) {\n    throw new Error('The AGOL geocoder does not support IP addresses');\n  }\n  if (value instanceof Array) {\n    //As defined in http://resources.arcgis.com/en/help/arcgis-rest-api/#/Batch_geocoding/02r300000003000000/\n    throw new Error('An ArcGIS Online organizational account is required to use the batch geocoding functionality');\n  }\n  var execute = function (value, token, callback) {\n    var params = {\n      'token': token,\n      'f': 'json',\n      'text': value,\n      'outFields': 'AddNum,StPreDir,StName,StType,City,Postal,Region,Country'\n    };\n    _this.httpAdapter.get(_this._endpoint, params, function (err, result) {\n      result = JSON.parse(result);\n      if (err) {\n        return callback(err);\n      } else {\n        //This is to work around ESRI's habit of returning 200 OK for failures such as lack of authentication\n        if (result.error) {\n          callback(result.error);\n          return null;\n        }\n        var results = [];\n        for (var i = 0; i < result.locations.length; i++) {\n          results.push(_this._formatResult(result.locations[i]));\n        }\n        results.raw = result;\n        callback(false, results);\n      }\n    });\n  };\n  this._getToken(function (err, token) {\n    if (err) {\n      return callback(err);\n    } else {\n      execute(value, token, callback);\n    }\n  });\n};\nAGOLGeocoder.prototype._formatResult = function (result) {\n  if (result.address) {\n    return {\n      'latitude': result.location.y,\n      'longitude': result.location.x,\n      'country': result.address.CountryCode,\n      'city': result.address.City,\n      'state': result.address.Region,\n      'zipcode': result.address.Postal,\n      'countryCode': result.address.CountryCode,\n      'address': result.address.Address,\n      'neighborhood': result.address.Neighborhood,\n      'loc_name': result.address.Loc_name\n    };\n  }\n  var country = null;\n  var countryCode = null;\n  var city = null;\n  var state = null;\n  var stateCode = null;\n  var zipcode = null;\n  var streetPreDir = null;\n  var streetType = null;\n  var streetName = null;\n  var streetNumber = null;\n  var attributes = result.feature.attributes;\n  for (var property in attributes) {\n    if (attributes.hasOwnProperty(property)) {\n      if (property == 'City') {\n        city = attributes[property];\n      }\n      if (property == 'Postal') {\n        zipcode = attributes[property];\n      }\n      if (property == 'Region') {\n        state = attributes[property];\n      }\n      if (property == 'StPreDir') {\n        streetPreDir = attributes[property];\n      }\n      if (property == 'AddNum') {\n        streetNumber = attributes[property];\n      }\n      if (property == 'StName') {\n        streetName = attributes[property];\n      }\n      if (property == 'StType') {\n        streetType = attributes[property];\n      }\n      if (property == 'Country') {\n        countryCode = attributes[property];\n        country = attributes[property];\n      }\n    }\n  }\n  return {\n    'latitude': result.feature.geometry.y,\n    'longitude': result.feature.geometry.x,\n    'country': country,\n    'city': city,\n    'state': state,\n    'stateCode': stateCode,\n    'zipcode': zipcode,\n    'streetName': streetPreDir + ' ' + streetName + ' ' + streetType,\n    'streetNumber': streetNumber,\n    'countryCode': countryCode\n  };\n};\n\n/**\n * Reverse geocoding\n * @param {lat:<number>,lon:<number>}  lat: Latitude, lon: Longitude\n * @param {function} callback Callback method\n */\nAGOLGeocoder.prototype.reverse = function (query, callback) {\n  var lat = query.lat;\n  var long = query.lon;\n  var _this = this;\n  var execute = function (lat, long, token, callback) {\n    var params = {\n      'token': token,\n      'f': 'json',\n      'location': long + ',' + lat,\n      'outFields': 'AddrNum,StPreDir,StName,StType,City,Postal,Region,Country'\n    };\n    _this.httpAdapter.get(_this._reverseEndpoint, params, function (err, result) {\n      result = JSON.parse(result);\n      if (err) {\n        return callback(err);\n      } else {\n        //This is to work around ESRI's habit of returning 200 OK for failures such as lack of authentication\n        if (result.error) {\n          callback(result.error, {\n            raw: result\n          });\n          return null;\n        }\n        var results = [];\n        results.push(_this._formatResult(result));\n        results.raw = result;\n        callback(false, results);\n      }\n    });\n  };\n  this._getToken(function (err, token) {\n    if (err) {\n      return callback(err);\n    } else {\n      execute(lat, long, token, callback);\n    }\n  });\n};\nmodule.exports = AGOLGeocoder;","map":{"version":3,"names":["net","require","AGOLGeocoder","httpAdapter","options","Error","client_id","client_secret","cache","prototype","_authEndpoint","_endpoint","_reverseEndpoint","_cachedToken","now","Date","getTime","put","token","experation","tokenExp","get","_getToken","callback","_this","params","err","result","JSON","parse","tokenExpiration","expires_in","access_token","geocode","value","isIP","Array","execute","error","results","i","locations","length","push","_formatResult","raw","address","location","y","x","CountryCode","City","Region","Postal","Address","Neighborhood","Loc_name","country","countryCode","city","state","stateCode","zipcode","streetPreDir","streetType","streetName","streetNumber","attributes","feature","property","hasOwnProperty","geometry","reverse","query","lat","long","lon","module","exports"],"sources":["/home/pratheek/Desktop/Attendance/frontend/node_modules/node-geocoder/lib/geocoder/agolgeocoder.js"],"sourcesContent":["'use strict';\n\nvar net = require('net');\n\n/**\n * Constructor\n * @param {Object} httpAdapter Http Adapter\n * @param {Object} options     Options (language, client_id, client_secret)\n */\nvar AGOLGeocoder = function AGOLGeocoder(httpAdapter, options) {\n\n  if (!httpAdapter || httpAdapter == 'undefined') {\n    throw new Error('ArcGis Online Geocoder requires a httpAdapter to be defined');\n  }\n\n  if (!options || options == 'undefined') {\n    options = {};\n  }\n\n  if (!options.client_id || options.client_id == 'undefined') {\n    options.client_id = null;\n  }\n\n  if (!options.client_secret || options.client_secret == 'undefined') {\n    options.client_secret = null;\n  }\n\n  if (!options.client_secret || !options.client_id) {\n\n    throw new Error('You must specify the client_id and the client_secret');\n  }\n\n  this.options = options;\n\n  this.httpAdapter = httpAdapter;\n  this.cache = {};\n};\n\nAGOLGeocoder.prototype._authEndpoint = 'https://www.arcgis.com/sharing/oauth2/token';\nAGOLGeocoder.prototype._endpoint = 'http://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/find';\nAGOLGeocoder.prototype._reverseEndpoint = 'http://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/reverseGeocode';\n\n//Cached vars\n\n\nAGOLGeocoder.prototype._cachedToken = {\n  'now': function() {\n    return (new Date()).getTime();\n  },\n  'put': function(token, experation,cache) {\n    cache.token = token;\n    //Shave 30 secs off experation to ensure that we expire slightly before the actual expiration\n    cache.tokenExp = this.now() + (experation - 30);\n  },\n  'get' : function(cache) {\n    if(!cache) {\n      return null;\n    }\n\n    if(this.now() <= cache.tokenExp) {\n      return cache.token;\n    } else {\n      return null;\n    }\n  }\n};\n\nAGOLGeocoder.prototype._getToken = function(callback) {\n  var _this = this;\n\n  if(_this._cachedToken.get(_this.cache) !== null) {\n    callback(_this._cachedToken.get());\n    return;\n    }\n\n  var params = {\n    'grant_type': 'client_credentials',\n    'client_id': _this.options.client_id,\n    'client_secret': _this.options.client_secret\n  };\n\n  _this.httpAdapter.get(_this._authEndpoint, params, function(err, result) {\n    if (err) {\n      return callback(err);\n    } else {\n      result = JSON.parse(result);\n      var tokenExpiration = (new Date()).getTime() + result.expires_in;\n      var token = result.access_token;\n      _this._cachedToken.put(token,tokenExpiration,_this.cache);\n\n      callback(false, token);\n    }\n  });\n};\n\n/**\n * Geocode\n * @param {String}   value    Value to geocode (Address)\n * @param {Function} callback Callback method\n */\nAGOLGeocoder.prototype.geocode = function(value, callback) {\n  var _this = this;\n\n  if (net.isIP(value)) {\n    throw new Error('The AGOL geocoder does not support IP addresses');\n  }\n\n  if (value instanceof Array) {\n    //As defined in http://resources.arcgis.com/en/help/arcgis-rest-api/#/Batch_geocoding/02r300000003000000/\n    throw new Error('An ArcGIS Online organizational account is required to use the batch geocoding functionality');\n  }\n\n  var execute = function (value,token,callback) {\n    var params = {\n      'token':token,\n      'f':'json',\n      'text':value,\n      'outFields': 'AddNum,StPreDir,StName,StType,City,Postal,Region,Country'\n    };\n\n    _this.httpAdapter.get(_this._endpoint, params, function(err, result) {\n      result = JSON.parse(result);\n        if (err) {\n          return callback(err);\n        } else {\n          //This is to work around ESRI's habit of returning 200 OK for failures such as lack of authentication\n          if(result.error){\n            callback(result.error);\n\n            return null;\n          }\n\n          var results = [];\n          for(var i = 0; i < result.locations.length; i++) {\n            results.push(_this._formatResult(result.locations[i]));\n          }\n\n          results.raw = result;\n          callback(false, results);\n        }\n    });\n  };\n\n  this._getToken(function(err,token) {\n    if (err) {\n      return callback(err);\n    } else {\n      execute(value,token,callback);\n    }\n  });\n};\n\nAGOLGeocoder.prototype._formatResult = function(result) {\n  if(result.address){\n    return {\n      'latitude' : result.location.y,\n      'longitude' : result.location.x,\n      'country' : result.address.CountryCode,\n      'city' : result.address.City,\n      'state' : result.address.Region,\n      'zipcode' : result.address.Postal,\n      'countryCode' : result.address.CountryCode,\n      'address': result.address.Address,\n      'neighborhood': result.address.Neighborhood,\n      'loc_name': result.address.Loc_name\n    };\n  }\n\n  var country = null;\n  var countryCode = null;\n  var city = null;\n  var state = null;\n  var stateCode = null;\n  var zipcode = null;\n  var streetPreDir = null;\n  var streetType = null;\n  var streetName = null;\n  var streetNumber = null;\n\n  var attributes = result.feature.attributes;\n  for (var property in attributes) {\n    if (attributes.hasOwnProperty(property)) {\n      if(property == 'City') {\n        city = attributes[property];\n      }\n      if(property == 'Postal') {\n        zipcode = attributes[property];\n      }\n      if(property == 'Region') {\n        state = attributes[property];\n      }\n      if(property == 'StPreDir') {\n        streetPreDir = attributes[property];\n      }\n      if(property == 'AddNum') {\n        streetNumber = attributes[property];\n      }\n      if(property == 'StName') {\n        streetName = attributes[property];\n      }\n      if(property == 'StType') {\n        streetType = attributes[property];\n      }\n      if(property == 'Country') {\n        countryCode = attributes[property];\n        country = attributes[property];\n      }\n    }\n  }\n\n  return {\n    'latitude' : result.feature.geometry.y,\n    'longitude' : result.feature.geometry.x,\n    'country' : country,\n    'city' : city,\n    'state' : state,\n    'stateCode' : stateCode,\n    'zipcode' : zipcode,\n    'streetName': streetPreDir + ' ' + streetName + ' ' + streetType,\n    'streetNumber' : streetNumber,\n    'countryCode' : countryCode\n  };\n};\n\n/**\n * Reverse geocoding\n * @param {lat:<number>,lon:<number>}  lat: Latitude, lon: Longitude\n * @param {function} callback Callback method\n */\nAGOLGeocoder.prototype.reverse = function(query, callback) {\n  var lat = query.lat;\n  var long = query.lon;\n\n  var _this = this;\n\n  var execute = function (lat,long,token,callback) {\n    var params = {\n      'token':token,\n      'f':'json',\n      'location' : long + ',' + lat,\n      'outFields': 'AddrNum,StPreDir,StName,StType,City,Postal,Region,Country'\n    };\n\n    _this.httpAdapter.get(_this._reverseEndpoint, params, function(err, result) {\n      result = JSON.parse(result);\n      if (err) {\n        return callback(err);\n      } else {\n        //This is to work around ESRI's habit of returning 200 OK for failures such as lack of authentication\n        if(result.error){\n          callback(result.error,{raw:result});\n          return null;\n        }\n\n        var results = [];\n        results.push(_this._formatResult(result));\n\n        results.raw = result;\n        callback(false, results);\n      }\n    });\n  };\n\n  this._getToken(function(err,token) {\n    if (err) {\n      return callback(err);\n    } else {\n      execute(lat,long,token,callback);\n    }\n  });\n};\n\nmodule.exports = AGOLGeocoder;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}