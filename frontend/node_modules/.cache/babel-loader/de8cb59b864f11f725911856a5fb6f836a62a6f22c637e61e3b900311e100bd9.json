{"ast":null,"code":"const readline = require('readline');\nconst AbstractGeocoder = require('./abstractgeocoder');\nconst ValueError = require('./../error/valueerror');\nconst OPTIONS = ['apiKey', 'appId', 'appCode', 'language', 'politicalView', 'country', 'state', 'production'];\n\n/**\n * Constructor\n * @param <object> httpAdapter Http Adapter\n * @param <object> options     Options (appId, appCode, language, politicalView, country, state, production)\n */\nclass HereGeocoder extends AbstractGeocoder {\n  constructor(httpAdapter, options) {\n    super(httpAdapter, options);\n    this.options = options;\n    OPTIONS.forEach(option => {\n      if (!options[option] || options[option] == 'undefined') {\n        this.options[option] = null;\n      }\n    });\n    if (!this.options.apiKey && !(this.options.appId && this.options.appCode)) {\n      throw new Error('You must specify apiKey to use Here Geocoder');\n    }\n  }\n\n  /**\n   * Geocode\n   * @param <string>   value    Value to geocode (Address)\n   * @param <function> callback Callback method\n   */\n  _geocode(value, callback) {\n    var _this = this;\n    var params = this._prepareQueryString();\n    if (value.address) {\n      if (value.language) {\n        params.language = value.language;\n      }\n      if (value.politicalView) {\n        params.politicalview = value.politicalView;\n      }\n      if (value.country) {\n        params.country = value.country;\n        if (value.state) {\n          params.state = value.state;\n        } else {\n          delete params.state;\n        }\n      }\n      if (value.zipcode) {\n        params.postalcode = value.zipcode;\n      }\n      params.searchtext = value.address;\n    } else {\n      params.searchtext = value;\n    }\n    this.httpAdapter.get(this._geocodeEndpoint, params, function (err, result) {\n      var results = [];\n      results.raw = result;\n      if (err) {\n        return callback(err, results);\n      } else {\n        if (result.type === 'ApplicationError') {\n          return callback(new ValueError(result.Details), results);\n        }\n        if (result.error === 'Unauthorized') {\n          return callback(new ValueError(result.error_description), results);\n        }\n        var view = result.Response?.View[0];\n        if (!view) {\n          return callback(false, results);\n        }\n\n        // Format each geocoding result\n        results = view.Result.map(_this._formatResult);\n        results.raw = result;\n        callback(false, results);\n      }\n    });\n  }\n\n  /**\n   * Reverse geocoding\n   * @param {lat:<number>,lon:<number>}  lat: Latitude, lon: Longitude\n   * @param <function> callback Callback method\n   */\n  _reverse(query, callback) {\n    var lat = query.lat;\n    var lng = query.lon;\n    var _this = this;\n    var params = this._prepareQueryString();\n    params.pos = lat + ',' + lng;\n    params.mode = 'trackPosition';\n    this.httpAdapter.get(this._reverseEndpoint, params, function (err, result) {\n      var results = [];\n      results.raw = result;\n      if (err) {\n        return callback(err, results);\n      } else {\n        var view = result.Response.View[0];\n        if (!view) {\n          return callback(false, results);\n        }\n\n        // Format each geocoding result\n        results = view.Result.map(_this._formatResult);\n        results.raw = result;\n        callback(false, results);\n      }\n    });\n  }\n  _formatResult(result) {\n    var location = result.Location || {};\n    var address = location.Address || {};\n    var i;\n    var extractedObj = {\n      formattedAddress: address.Label || null,\n      latitude: location.DisplayPosition.Latitude,\n      longitude: location.DisplayPosition.Longitude,\n      country: null,\n      countryCode: address.Country || null,\n      state: address.State || null,\n      county: address.County || null,\n      city: address.City || null,\n      zipcode: address.PostalCode || null,\n      district: address.District || null,\n      streetName: address.Street || null,\n      streetNumber: address.HouseNumber || null,\n      building: address.Building || null,\n      extra: {\n        herePlaceId: location.LocationId || null,\n        confidence: result.Relevance || 0\n      },\n      administrativeLevels: {}\n    };\n    for (i = 0; i < address.AdditionalData.length; i++) {\n      var additionalData = address.AdditionalData[i];\n      switch (additionalData.key) {\n        //Country 2-digit code\n        case 'Country2':\n          extractedObj.countryCode = additionalData.value;\n          break;\n        //Country name\n        case 'CountryName':\n          extractedObj.country = additionalData.value;\n          break;\n        //State name\n        case 'StateName':\n          extractedObj.administrativeLevels.level1long = additionalData.value;\n          extractedObj.state = additionalData.value;\n          break;\n        //County name\n        case 'CountyName':\n          extractedObj.administrativeLevels.level2long = additionalData.value;\n          extractedObj.county = additionalData.value;\n      }\n    }\n    return extractedObj;\n  }\n  _prepareQueryString() {\n    var params = {\n      additionaldata: 'Country2,true',\n      gen: 8\n    };\n\n    // Deprecated\n    if (this.options.appId) {\n      params.app_id = this.options.appId;\n    }\n    // Deprecated\n    if (this.options.appCode) {\n      params.app_code = this.options.appCode;\n    }\n    if (this.options.apiKey) {\n      params.apiKey = this.options.apiKey;\n    }\n    if (this.options.language) {\n      params.language = this.options.language;\n    }\n    if (this.options.politicalView) {\n      params.politicalview = this.options.politicalView;\n    }\n    if (this.options.country) {\n      params.country = this.options.country;\n    }\n    if (this.options.state) {\n      params.state = this.options.state;\n    }\n    if (this.options.limit) {\n      params.maxresults = this.options.limit;\n    }\n    return params;\n  }\n  async _batchGeocode(values, callback) {\n    try {\n      const jobId = await this.__createJob(values);\n      await this.__pollJobStatus(jobId);\n      const rawResults = await this._getJobResults(jobId);\n      const results = this.__parseBatchResults(rawResults);\n      callback(false, results);\n    } catch (error) {\n      callback(error, null);\n    }\n  }\n  async __createJob(values) {\n    const {\n      country\n    } = this.options;\n    const body = `recId|searchText${country ? '|country' : ''}` + '\\n' + values.map((value, ix) => `${ix + 1}|\"${value}\"${country ? `|${country}` : ''}`).join(' \\n') + '\\n';\n    const params = {\n      ...this._prepareQueryString(),\n      action: 'run',\n      outdelim: '|',\n      indelim: '|',\n      header: false,\n      outputcombined: true,\n      outcols: 'latitude,longitude,locationLabel,houseNumber,street,district,city,postalCode,county,state,addressDetailsCountry,country,building,locationId'\n    };\n    const options = {\n      body,\n      headers: {\n        'content-type': 'text/plain',\n        accept: 'application/json'\n      }\n    };\n    const creteJobReq = await new Promise((resolve, reject) => {\n      this.httpAdapter.post(this._batchGeocodeEndpoint, params, options, (err, result) => {\n        if (err) return reject(err);\n        resolve(result);\n      });\n    });\n    const jobRes = await creteJobReq.json();\n    if (jobRes.type === 'ApplicationError') {\n      throw new Error(jobRes.Details);\n    }\n    return jobRes.Response.MetaInfo.RequestId;\n  }\n  async __pollJobStatus(jobId) {\n    let completed = false;\n    let stalledResultsCount = 500;\n    const url = `${this._batchGeocodeEndpoint}/${jobId}`;\n    const params = {\n      ...this._prepareQueryString(),\n      action: 'status'\n    };\n    for (; !completed && stalledResultsCount > 0; stalledResultsCount--) {\n      const jobStatus = await new Promise((resolve, reject) => {\n        this.httpAdapter.get(url, params, (err, result) => {\n          if (err) return reject(err);\n          resolve(result);\n        });\n      });\n      if (jobStatus.Response.Status === 'completed') {\n        completed = true;\n        break;\n      }\n    }\n    if (!completed) {\n      throw new Error('Job timeout');\n    }\n  }\n  async _getJobResults(jobId) {\n    // fetch job results\n    const params = {\n      ...this._prepareQueryString(),\n      outputcompressed: false\n    };\n    const jobResult = await new Promise((resolve, reject) => {\n      this.httpAdapter.get(`${this._batchGeocodeEndpoint}/${jobId}/result`, params, (err, result) => {\n        if (err) return reject(err);\n        resolve(result);\n      }, true);\n    });\n    const jobResultLineReadeer = readline.createInterface({\n      input: jobResult.body,\n      crlfDelay: Infinity\n    });\n    const res = [];\n    for await (const line of jobResultLineReadeer) {\n      const [recId,,, /*seqNumber*/ /*seqLength*/latitude, longitude, locationLabel, houseNumber, street, district, city, postalCode, county, state, addressDetailsCountry, country, building, locationId] = line.split('|');\n      const index = Number(recId) - 1; // minus one because our index starts at 0 and theirs at 1\n      res[index] = res[index] || {\n        error: null,\n        values: []\n      };\n      res[index].values.push({\n        latitude: Number(latitude),\n        longitude: Number(longitude),\n        houseNumber,\n        street,\n        locationLabel,\n        district,\n        city,\n        postalCode,\n        county,\n        state,\n        addressDetailsCountry,\n        // country name. See formatting\n        country,\n        // contry code. See formatting\n        building,\n        locationId\n      });\n    }\n\n    // fetch job erros sepparately\n    const jobErrors = await new Promise((resolve, reject) => {\n      this.httpAdapter.get(`${this._batchGeocodeEndpoint}/${jobId}/errors`, params, (err, result) => {\n        if (err) return reject(err);\n        resolve(result);\n      }, true);\n    });\n    const jobErrorsLineReader = readline.createInterface({\n      input: jobErrors.body,\n      crlfDelay: Infinity\n    });\n    for await (const line of jobErrorsLineReader) {\n      const matches = line.match(/Line Number:(?<index>\\d+)\\s+(?<line>.*)/);\n      if (matches && matches.groups && matches.index) {\n        const index = Number(matches.groups.index) - 2; // minus one because the first line is the header & one less because our index starts at 0 while theirs at 1\n        res[index] = res[index] || {\n          error: null,\n          values: []\n        };\n        res[index].error = matches.groups.line;\n      } else {\n        throw new Error(`Unexpected error line format: \"${line}\"`);\n      }\n    }\n    return res;\n  }\n  __parseBatchResults(results) {\n    return results.map(result => {\n      const {\n        values,\n        error\n      } = result;\n      return {\n        error,\n        value: values.map(value => {\n          const {\n            latitude,\n            longitude,\n            district,\n            city,\n            county,\n            state,\n            addressDetailsCountry,\n            country,\n            building\n          } = value;\n          return {\n            formattedAddress: value.locationLabel,\n            latitude,\n            longitude,\n            country: addressDetailsCountry,\n            countryCode: country,\n            state,\n            county,\n            city,\n            zipcode: value.postalCode,\n            district,\n            streetName: value.street,\n            streetNumber: value.houseNumber,\n            building,\n            extra: {\n              herePlaceId: value.locationId,\n              confidence: null\n            },\n            provider: 'here'\n          };\n        })\n      };\n    });\n  }\n}\nObject.defineProperties(HereGeocoder.prototype, {\n  // Here geocoding API endpoint\n  _geocodeEndpoint: {\n    get: function () {\n      return 'https://geocoder.ls.hereapi.com/6.2/geocode.json';\n    }\n  },\n  // Here reverse geocoding API endpoint\n  _reverseEndpoint: {\n    get: function () {\n      return 'https://reverse.geocoder.ls.hereapi.com/6.2/reversegeocode.json';\n    }\n  },\n  // Here batch geocoding API endpoint\n  _batchGeocodeEndpoint: {\n    get: function () {\n      return 'https://batch.geocoder.ls.hereapi.com/6.2/jobs';\n    }\n  }\n});\nmodule.exports = HereGeocoder;","map":{"version":3,"names":["readline","require","AbstractGeocoder","ValueError","OPTIONS","HereGeocoder","constructor","httpAdapter","options","forEach","option","apiKey","appId","appCode","Error","_geocode","value","callback","_this","params","_prepareQueryString","address","language","politicalView","politicalview","country","state","zipcode","postalcode","searchtext","get","_geocodeEndpoint","err","result","results","raw","type","Details","error","error_description","view","Response","View","Result","map","_formatResult","_reverse","query","lat","lng","lon","pos","mode","_reverseEndpoint","location","Location","Address","i","extractedObj","formattedAddress","Label","latitude","DisplayPosition","Latitude","longitude","Longitude","countryCode","Country","State","county","County","city","City","PostalCode","district","District","streetName","Street","streetNumber","HouseNumber","building","Building","extra","herePlaceId","LocationId","confidence","Relevance","administrativeLevels","AdditionalData","length","additionalData","key","level1long","level2long","additionaldata","gen","app_id","app_code","limit","maxresults","_batchGeocode","values","jobId","__createJob","__pollJobStatus","rawResults","_getJobResults","__parseBatchResults","body","ix","join","action","outdelim","indelim","header","outputcombined","outcols","headers","accept","creteJobReq","Promise","resolve","reject","post","_batchGeocodeEndpoint","jobRes","json","MetaInfo","RequestId","completed","stalledResultsCount","url","jobStatus","Status","outputcompressed","jobResult","jobResultLineReadeer","createInterface","input","crlfDelay","Infinity","res","line","recId","locationLabel","houseNumber","street","postalCode","addressDetailsCountry","locationId","split","index","Number","push","jobErrors","jobErrorsLineReader","matches","match","groups","provider","Object","defineProperties","prototype","module","exports"],"sources":["/home/pratheek/Desktop/Attendance/frontend/node_modules/node-geocoder/lib/geocoder/heregeocoder.js"],"sourcesContent":["const readline = require('readline');\nconst AbstractGeocoder = require('./abstractgeocoder');\nconst ValueError = require('./../error/valueerror');\n\nconst OPTIONS = [\n  'apiKey',\n  'appId',\n  'appCode',\n  'language',\n  'politicalView',\n  'country',\n  'state',\n  'production'\n];\n\n/**\n * Constructor\n * @param <object> httpAdapter Http Adapter\n * @param <object> options     Options (appId, appCode, language, politicalView, country, state, production)\n */\nclass HereGeocoder extends AbstractGeocoder {\n  constructor(httpAdapter, options) {\n    super(httpAdapter, options);\n    this.options = options;\n    OPTIONS.forEach(option => {\n      if (!options[option] || options[option] == 'undefined') {\n        this.options[option] = null;\n      }\n    });\n\n    if (!this.options.apiKey && !(this.options.appId && this.options.appCode)) {\n      throw new Error('You must specify apiKey to use Here Geocoder');\n    }\n  }\n\n  /**\n   * Geocode\n   * @param <string>   value    Value to geocode (Address)\n   * @param <function> callback Callback method\n   */\n  _geocode(value, callback) {\n    var _this = this;\n    var params = this._prepareQueryString();\n\n    if (value.address) {\n      if (value.language) {\n        params.language = value.language;\n      }\n      if (value.politicalView) {\n        params.politicalview = value.politicalView;\n      }\n      if (value.country) {\n        params.country = value.country;\n        if (value.state) {\n          params.state = value.state;\n        } else {\n          delete params.state;\n        }\n      }\n      if (value.zipcode) {\n        params.postalcode = value.zipcode;\n      }\n      params.searchtext = value.address;\n    } else {\n      params.searchtext = value;\n    }\n\n    this.httpAdapter.get(this._geocodeEndpoint, params, function (err, result) {\n      var results = [];\n      results.raw = result;\n\n      if (err) {\n        return callback(err, results);\n      } else {\n        if (result.type === 'ApplicationError') {\n          return callback(new ValueError(result.Details), results);\n        }\n        if (result.error === 'Unauthorized') {\n          return callback(new ValueError(result.error_description), results);\n        }\n        var view = result.Response?.View[0];\n        if (!view) {\n          return callback(false, results);\n        }\n\n        // Format each geocoding result\n        results = view.Result.map(_this._formatResult);\n        results.raw = result;\n\n        callback(false, results);\n      }\n    });\n  }\n\n  /**\n   * Reverse geocoding\n   * @param {lat:<number>,lon:<number>}  lat: Latitude, lon: Longitude\n   * @param <function> callback Callback method\n   */\n  _reverse(query, callback) {\n    var lat = query.lat;\n    var lng = query.lon;\n\n    var _this = this;\n    var params = this._prepareQueryString();\n    params.pos = lat + ',' + lng;\n    params.mode = 'trackPosition';\n\n    this.httpAdapter.get(this._reverseEndpoint, params, function (err, result) {\n      var results = [];\n      results.raw = result;\n\n      if (err) {\n        return callback(err, results);\n      } else {\n        var view = result.Response.View[0];\n        if (!view) {\n          return callback(false, results);\n        }\n\n        // Format each geocoding result\n        results = view.Result.map(_this._formatResult);\n        results.raw = result;\n\n        callback(false, results);\n      }\n    });\n  }\n\n  _formatResult(result) {\n    var location = result.Location || {};\n    var address = location.Address || {};\n    var i;\n\n    var extractedObj = {\n      formattedAddress: address.Label || null,\n      latitude: location.DisplayPosition.Latitude,\n      longitude: location.DisplayPosition.Longitude,\n      country: null,\n      countryCode: address.Country || null,\n      state: address.State || null,\n      county: address.County || null,\n      city: address.City || null,\n      zipcode: address.PostalCode || null,\n      district: address.District || null,\n      streetName: address.Street || null,\n      streetNumber: address.HouseNumber || null,\n      building: address.Building || null,\n      extra: {\n        herePlaceId: location.LocationId || null,\n        confidence: result.Relevance || 0\n      },\n      administrativeLevels: {}\n    };\n\n    for (i = 0; i < address.AdditionalData.length; i++) {\n      var additionalData = address.AdditionalData[i];\n      switch (additionalData.key) {\n        //Country 2-digit code\n        case 'Country2':\n          extractedObj.countryCode = additionalData.value;\n          break;\n        //Country name\n        case 'CountryName':\n          extractedObj.country = additionalData.value;\n          break;\n        //State name\n        case 'StateName':\n          extractedObj.administrativeLevels.level1long = additionalData.value;\n          extractedObj.state = additionalData.value;\n          break;\n        //County name\n        case 'CountyName':\n          extractedObj.administrativeLevels.level2long = additionalData.value;\n          extractedObj.county = additionalData.value;\n      }\n    }\n\n    return extractedObj;\n  }\n  _prepareQueryString() {\n    var params = {\n      additionaldata: 'Country2,true',\n      gen: 8\n    };\n\n    // Deprecated\n    if (this.options.appId) {\n      params.app_id = this.options.appId;\n    }\n    // Deprecated\n    if (this.options.appCode) {\n      params.app_code = this.options.appCode;\n    }\n\n    if (this.options.apiKey) {\n      params.apiKey = this.options.apiKey;\n    }\n    if (this.options.language) {\n      params.language = this.options.language;\n    }\n    if (this.options.politicalView) {\n      params.politicalview = this.options.politicalView;\n    }\n    if (this.options.country) {\n      params.country = this.options.country;\n    }\n    if (this.options.state) {\n      params.state = this.options.state;\n    }\n    if (this.options.limit) {\n      params.maxresults = this.options.limit;\n    }\n\n    return params;\n  }\n\n  async _batchGeocode(values, callback) {\n    try {\n      const jobId = await this.__createJob(values);\n      await this.__pollJobStatus(jobId);\n      const rawResults = await this._getJobResults(jobId);\n      const results = this.__parseBatchResults(rawResults);\n      callback(false, results);\n    } catch (error) {\n      callback(error, null);\n    }\n  }\n\n  async __createJob(values) {\n    const { country } = this.options;\n    const body =\n      `recId|searchText${country ? '|country' : ''}` +\n      '\\n' +\n      values\n        .map(\n          (value, ix) => `${ix + 1}|\"${value}\"${country ? `|${country}` : ''}`\n        )\n        .join(' \\n') +\n      '\\n';\n    const params = {\n      ...this._prepareQueryString(),\n      action: 'run',\n      outdelim: '|',\n      indelim: '|',\n      header: false,\n      outputcombined: true,\n      outcols:\n        'latitude,longitude,locationLabel,houseNumber,street,district,city,postalCode,county,state,addressDetailsCountry,country,building,locationId'\n    };\n    const options = {\n      body,\n      headers: {\n        'content-type': 'text/plain',\n        accept: 'application/json'\n      }\n    };\n    const creteJobReq = await new Promise((resolve, reject) => {\n      this.httpAdapter.post(\n        this._batchGeocodeEndpoint,\n        params,\n        options,\n        (err, result) => {\n          if (err) return reject(err);\n          resolve(result);\n        }\n      );\n    });\n    const jobRes = await creteJobReq.json();\n    if (jobRes.type === 'ApplicationError') {\n      throw new Error(jobRes.Details);\n    }\n    return jobRes.Response.MetaInfo.RequestId;\n  }\n\n  async __pollJobStatus(jobId) {\n    let completed = false;\n    let stalledResultsCount = 500;\n    const url = `${this._batchGeocodeEndpoint}/${jobId}`;\n    const params = {\n      ...this._prepareQueryString(),\n      action: 'status'\n    };\n    for (; !completed && stalledResultsCount > 0; stalledResultsCount--) {\n      const jobStatus = await new Promise((resolve, reject) => {\n        this.httpAdapter.get(url, params, (err, result) => {\n          if (err) return reject(err);\n          resolve(result);\n        });\n      });\n      if (jobStatus.Response.Status === 'completed') {\n        completed = true;\n        break;\n      }\n    }\n    if (!completed) {\n      throw new Error('Job timeout');\n    }\n  }\n\n  async _getJobResults(jobId) {\n    // fetch job results\n    const params = {\n      ...this._prepareQueryString(),\n      outputcompressed: false\n    };\n    const jobResult = await new Promise((resolve, reject) => {\n      this.httpAdapter.get(\n        `${this._batchGeocodeEndpoint}/${jobId}/result`,\n        params,\n        (err, result) => {\n          if (err) return reject(err);\n          resolve(result);\n        },\n        true\n      );\n    });\n    const jobResultLineReadeer = readline.createInterface({\n      input: jobResult.body,\n      crlfDelay: Infinity\n    });\n    const res = [];\n    for await (const line of jobResultLineReadeer) {\n      const [\n        recId,\n        ,\n        ,\n        /*seqNumber*/ /*seqLength*/ latitude,\n        longitude,\n        locationLabel,\n        houseNumber,\n        street,\n        district,\n        city,\n        postalCode,\n        county,\n        state,\n        addressDetailsCountry,\n        country,\n        building,\n        locationId\n      ] = line.split('|');\n      const index = Number(recId) - 1; // minus one because our index starts at 0 and theirs at 1\n      res[index] = res[index] || { error: null, values: [] };\n      res[index].values.push({\n        latitude: Number(latitude),\n        longitude: Number(longitude),\n        houseNumber,\n        street,\n        locationLabel,\n        district,\n        city,\n        postalCode,\n        county,\n        state,\n        addressDetailsCountry, // country name. See formatting\n        country, // contry code. See formatting\n        building,\n        locationId\n      });\n    }\n\n    // fetch job erros sepparately\n    const jobErrors = await new Promise((resolve, reject) => {\n      this.httpAdapter.get(\n        `${this._batchGeocodeEndpoint}/${jobId}/errors`,\n        params,\n        (err, result) => {\n          if (err) return reject(err);\n          resolve(result);\n        },\n        true\n      );\n    });\n    const jobErrorsLineReader = readline.createInterface({\n      input: jobErrors.body,\n      crlfDelay: Infinity\n    });\n    for await (const line of jobErrorsLineReader) {\n      const matches = line.match(/Line Number:(?<index>\\d+)\\s+(?<line>.*)/);\n      if (matches && matches.groups && matches.index) {\n        const index = Number(matches.groups.index) - 2; // minus one because the first line is the header & one less because our index starts at 0 while theirs at 1\n        res[index] = res[index] || { error: null, values: [] };\n        res[index].error = matches.groups.line;\n      } else {\n        throw new Error(`Unexpected error line format: \"${line}\"`);\n      }\n    }\n    return res;\n  }\n\n  __parseBatchResults(results) {\n    return results.map(result => {\n      const { values, error } = result;\n      return {\n        error,\n        value: values.map(value => {\n          const {\n            latitude,\n            longitude,\n            district,\n            city,\n            county,\n            state,\n            addressDetailsCountry,\n            country,\n            building\n          } = value;\n          return {\n            formattedAddress: value.locationLabel,\n            latitude,\n            longitude,\n            country: addressDetailsCountry,\n            countryCode: country,\n            state,\n            county,\n            city,\n            zipcode: value.postalCode,\n            district,\n            streetName: value.street,\n            streetNumber: value.houseNumber,\n            building,\n            extra: {\n              herePlaceId: value.locationId,\n              confidence: null\n            },\n            provider: 'here'\n          };\n        })\n      };\n    });\n  }\n}\n\nObject.defineProperties(HereGeocoder.prototype, {\n  // Here geocoding API endpoint\n  _geocodeEndpoint: {\n    get: function () {\n      return 'https://geocoder.ls.hereapi.com/6.2/geocode.json';\n    }\n  },\n\n  // Here reverse geocoding API endpoint\n  _reverseEndpoint: {\n    get: function () {\n      return 'https://reverse.geocoder.ls.hereapi.com/6.2/reversegeocode.json';\n    }\n  },\n\n  // Here batch geocoding API endpoint\n  _batchGeocodeEndpoint: {\n    get: function () {\n      return 'https://batch.geocoder.ls.hereapi.com/6.2/jobs';\n    }\n  }\n});\n\nmodule.exports = HereGeocoder;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}