{"ast":null,"code":"var util = require('util'),\n  net = require('net'),\n  AbstractGeocoder = require('./abstractgeocoder');\n\n/**\n * Constructor\n */\nvar DataScienceToolkitGeocoder = function DataScienceToolkitGeocoder(httpAdapter, options) {\n  this.options = ['host'];\n  this.supportIPv4 = true;\n  DataScienceToolkitGeocoder.super_.call(this, httpAdapter, options);\n};\nutil.inherits(DataScienceToolkitGeocoder, AbstractGeocoder);\n\n/**\n* Build DSTK endpoint, allows for local DSTK installs\n* @param <string>   value    Value to geocode (Address or IPv4)\n*/\nDataScienceToolkitGeocoder.prototype._endpoint = function (value) {\n  var ep = {};\n  var host = 'www.datasciencetoolkit.org';\n  if (this.options.host) {\n    host = this.options.host;\n  }\n  ep.ipv4Endpoint = 'http://' + host + '/ip2coordinates/';\n  ep.street2coordinatesEndpoint = 'http://' + host + '/street2coordinates/';\n  return net.isIPv4(value) ? ep.ipv4Endpoint : ep.street2coordinatesEndpoint;\n};\n\n/**\n* Geocode\n* @param <string>   value    Value to geocode (Address or IPv4)\n* @param <function> callback Callback method\n*/\nDataScienceToolkitGeocoder.prototype._geocode = function (value, callback) {\n  var ep = this._endpoint(value);\n  this.httpAdapter.get(ep + value, {}, function (err, result) {\n    if (err) {\n      return callback(err);\n    } else {\n      result = result[value];\n      if (!result) {\n        return callback(new Error('Could not geocode \"' + value + '\".'));\n      }\n      var results = [];\n      results.push({\n        'latitude': result.latitude,\n        'longitude': result.longitude,\n        'country': result.country_name,\n        'city': result.city || result.locality,\n        'state': result.state || result.region,\n        'zipcode': result.postal_code,\n        'streetName': result.street_name,\n        'streetNumber': result.street_number,\n        'countryCode': result.country_code\n      });\n      results.raw = result;\n      callback(false, results);\n    }\n  });\n};\nmodule.exports = DataScienceToolkitGeocoder;","map":{"version":3,"names":["util","require","net","AbstractGeocoder","DataScienceToolkitGeocoder","httpAdapter","options","supportIPv4","super_","call","inherits","prototype","_endpoint","value","ep","host","ipv4Endpoint","street2coordinatesEndpoint","isIPv4","_geocode","callback","get","err","result","Error","results","push","latitude","longitude","country_name","city","locality","state","region","postal_code","street_name","street_number","country_code","raw","module","exports"],"sources":["/home/pratheek/Desktop/Attendance/frontend/node_modules/node-geocoder/lib/geocoder/datasciencetoolkitgeocoder.js"],"sourcesContent":["var util             = require('util'),\n    net              = require('net'),\n    AbstractGeocoder = require('./abstractgeocoder');\n\n/**\n * Constructor\n */\nvar DataScienceToolkitGeocoder = function DataScienceToolkitGeocoder(httpAdapter,options) {\n    this.options     = ['host'];\n    this.supportIPv4 = true;\n\n    DataScienceToolkitGeocoder.super_.call(this, httpAdapter, options);\n};\n\nutil.inherits(DataScienceToolkitGeocoder, AbstractGeocoder);\n\n/**\n* Build DSTK endpoint, allows for local DSTK installs\n* @param <string>   value    Value to geocode (Address or IPv4)\n*/\nDataScienceToolkitGeocoder.prototype._endpoint = function(value) {\n   var ep = { };\n   var host = 'www.datasciencetoolkit.org';\n\n   if(this.options.host) {\n        host =  this.options.host;\n    }\n\n    ep.ipv4Endpoint = 'http://' + host + '/ip2coordinates/';\n    ep.street2coordinatesEndpoint = 'http://' + host + '/street2coordinates/';\n\n    return net.isIPv4(value) ? ep.ipv4Endpoint : ep.street2coordinatesEndpoint;\n};\n\n/**\n* Geocode\n* @param <string>   value    Value to geocode (Address or IPv4)\n* @param <function> callback Callback method\n*/\nDataScienceToolkitGeocoder.prototype._geocode = function(value, callback) {\n\n    var ep = this._endpoint(value);\n    this.httpAdapter.get(ep + value , { }, function(err, result) {\n        if (err) {\n            return callback(err);\n        } else {\n            result = result[value];\n            if (!result) {\n                return callback(new Error('Could not geocode \"' + value + '\".'));\n            }\n\n            var results = [];\n\n            results.push({\n                'latitude' : result.latitude,\n                'longitude' : result.longitude,\n                'country' : result.country_name,\n                'city' : result.city || result.locality,\n                'state' : result.state || result.region,\n                'zipcode' : result.postal_code,\n                'streetName': result.street_name,\n                'streetNumber' : result.street_number,\n                'countryCode' : result.country_code\n            });\n\n            results.raw = result;\n            callback(false, results);\n        }\n\n    });\n\n};\n\nmodule.exports = DataScienceToolkitGeocoder;\n"],"mappings":"AAAA,IAAIA,IAAI,GAAeC,OAAO,CAAC,MAAM,CAAC;EAClCC,GAAG,GAAgBD,OAAO,CAAC,KAAK,CAAC;EACjCE,gBAAgB,GAAGF,OAAO,CAAC,oBAAoB,CAAC;;AAEpD;AACA;AACA;AACA,IAAIG,0BAA0B,GAAG,SAASA,0BAA0BA,CAACC,WAAW,EAACC,OAAO,EAAE;EACtF,IAAI,CAACA,OAAO,GAAO,CAAC,MAAM,CAAC;EAC3B,IAAI,CAACC,WAAW,GAAG,IAAI;EAEvBH,0BAA0B,CAACI,MAAM,CAACC,IAAI,CAAC,IAAI,EAAEJ,WAAW,EAAEC,OAAO,CAAC;AACtE,CAAC;AAEDN,IAAI,CAACU,QAAQ,CAACN,0BAA0B,EAAED,gBAAgB,CAAC;;AAE3D;AACA;AACA;AACA;AACAC,0BAA0B,CAACO,SAAS,CAACC,SAAS,GAAG,UAASC,KAAK,EAAE;EAC9D,IAAIC,EAAE,GAAG,CAAE,CAAC;EACZ,IAAIC,IAAI,GAAG,4BAA4B;EAEvC,IAAG,IAAI,CAACT,OAAO,CAACS,IAAI,EAAE;IACjBA,IAAI,GAAI,IAAI,CAACT,OAAO,CAACS,IAAI;EAC7B;EAEAD,EAAE,CAACE,YAAY,GAAG,SAAS,GAAGD,IAAI,GAAG,kBAAkB;EACvDD,EAAE,CAACG,0BAA0B,GAAG,SAAS,GAAGF,IAAI,GAAG,sBAAsB;EAEzE,OAAOb,GAAG,CAACgB,MAAM,CAACL,KAAK,CAAC,GAAGC,EAAE,CAACE,YAAY,GAAGF,EAAE,CAACG,0BAA0B;AAC9E,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAb,0BAA0B,CAACO,SAAS,CAACQ,QAAQ,GAAG,UAASN,KAAK,EAAEO,QAAQ,EAAE;EAEtE,IAAIN,EAAE,GAAG,IAAI,CAACF,SAAS,CAACC,KAAK,CAAC;EAC9B,IAAI,CAACR,WAAW,CAACgB,GAAG,CAACP,EAAE,GAAGD,KAAK,EAAG,CAAE,CAAC,EAAE,UAASS,GAAG,EAAEC,MAAM,EAAE;IACzD,IAAID,GAAG,EAAE;MACL,OAAOF,QAAQ,CAACE,GAAG,CAAC;IACxB,CAAC,MAAM;MACHC,MAAM,GAAGA,MAAM,CAACV,KAAK,CAAC;MACtB,IAAI,CAACU,MAAM,EAAE;QACT,OAAOH,QAAQ,CAAC,IAAII,KAAK,CAAC,qBAAqB,GAAGX,KAAK,GAAG,IAAI,CAAC,CAAC;MACpE;MAEA,IAAIY,OAAO,GAAG,EAAE;MAEhBA,OAAO,CAACC,IAAI,CAAC;QACT,UAAU,EAAGH,MAAM,CAACI,QAAQ;QAC5B,WAAW,EAAGJ,MAAM,CAACK,SAAS;QAC9B,SAAS,EAAGL,MAAM,CAACM,YAAY;QAC/B,MAAM,EAAGN,MAAM,CAACO,IAAI,IAAIP,MAAM,CAACQ,QAAQ;QACvC,OAAO,EAAGR,MAAM,CAACS,KAAK,IAAIT,MAAM,CAACU,MAAM;QACvC,SAAS,EAAGV,MAAM,CAACW,WAAW;QAC9B,YAAY,EAAEX,MAAM,CAACY,WAAW;QAChC,cAAc,EAAGZ,MAAM,CAACa,aAAa;QACrC,aAAa,EAAGb,MAAM,CAACc;MAC3B,CAAC,CAAC;MAEFZ,OAAO,CAACa,GAAG,GAAGf,MAAM;MACpBH,QAAQ,CAAC,KAAK,EAAEK,OAAO,CAAC;IAC5B;EAEJ,CAAC,CAAC;AAEN,CAAC;AAEDc,MAAM,CAACC,OAAO,GAAGpC,0BAA0B","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}