{"ast":null,"code":"/* eslint-env browser */\nimport { pEvent } from 'p-event';\nimport { isIPv4, isIPv6 } from 'is-ip';\nconst getIp = async ({\n  isSecondTry = false\n} = {}) => {\n  try {\n    const peerConnection = new RTCPeerConnection({\n      iceServers: []\n    });\n    peerConnection.createDataChannel('');\n    peerConnection.createOffer(peerConnection.setLocalDescription.bind(peerConnection), () => {});\n    const {\n      candidate\n    } = await pEvent(peerConnection, 'icecandidate', {\n      timeout: 10_000\n    });\n    peerConnection.close();\n    if (!(candidate && candidate.candidate)) {\n      return;\n    }\n    const result = candidate.candidate.split(' ')[4];\n    if (!result.endsWith('.local')) {\n      return result;\n    }\n    if (isSecondTry) {\n      return;\n    }\n    const inputDevices = await navigator.mediaDevices.enumerateDevices();\n    const inputDeviceTypes = new Set(inputDevices.map(({\n      kind\n    }) => kind));\n    const constraints = {};\n    if (inputDeviceTypes.has('audioinput')) {\n      constraints.audio = true;\n    } else if (inputDeviceTypes.has('videoinput')) {\n      constraints.video = true;\n    } else {\n      return;\n    }\n    const mediaStream = await navigator.mediaDevices.getUserMedia(constraints);\n    for (const track of mediaStream.getTracks()) {\n      track.stop();\n    }\n    return await getIp({\n      isSecondTry: true\n    });\n  } catch {}\n};\nexport async function internalIpV6() {\n  const result = await getIp();\n  if (isIPv6(result)) {\n    return result;\n  }\n}\nexport async function internalIpV4() {\n  const result = await getIp();\n  if (isIPv4(result)) {\n    return result;\n  }\n}\nexport function internalIpV6Sync() {}\nexport function internalIpV4Sync() {}","map":{"version":3,"names":["pEvent","isIPv4","isIPv6","getIp","isSecondTry","peerConnection","RTCPeerConnection","iceServers","createDataChannel","createOffer","setLocalDescription","bind","candidate","timeout","close","result","split","endsWith","inputDevices","navigator","mediaDevices","enumerateDevices","inputDeviceTypes","Set","map","kind","constraints","has","audio","video","mediaStream","getUserMedia","track","getTracks","stop","internalIpV6","internalIpV4","internalIpV6Sync","internalIpV4Sync"],"sources":["/home/pratheek/Desktop/Attendance/node_modules/internal-ip/browser.js"],"sourcesContent":["/* eslint-env browser */\nimport {pEvent} from 'p-event';\nimport {isIPv4, isIPv6} from 'is-ip';\n\nconst getIp = async ({isSecondTry = false} = {}) => {\n\ttry {\n\t\tconst peerConnection = new RTCPeerConnection({iceServers: []});\n\n\t\tpeerConnection.createDataChannel('');\n\t\tpeerConnection.createOffer(peerConnection.setLocalDescription.bind(peerConnection), () => {});\n\n\t\tconst {candidate} = await pEvent(peerConnection, 'icecandidate', {\n\t\t\ttimeout: 10_000,\n\t\t});\n\n\t\tpeerConnection.close();\n\n\t\tif (!(candidate && candidate.candidate)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst result = candidate.candidate.split(' ')[4];\n\t\tif (!result.endsWith('.local')) {\n\t\t\treturn result;\n\t\t}\n\n\t\tif (isSecondTry) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst inputDevices = await navigator.mediaDevices.enumerateDevices();\n\t\tconst inputDeviceTypes = new Set(inputDevices.map(({kind}) => kind));\n\n\t\tconst constraints = {};\n\t\tif (inputDeviceTypes.has('audioinput')) {\n\t\t\tconstraints.audio = true;\n\t\t} else if (inputDeviceTypes.has('videoinput')) {\n\t\t\tconstraints.video = true;\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\n\t\tconst mediaStream = await navigator.mediaDevices.getUserMedia(constraints);\n\t\tfor (const track of mediaStream.getTracks()) {\n\t\t\ttrack.stop();\n\t\t}\n\n\t\treturn await getIp({isSecondTry: true});\n\t} catch {}\n};\n\nexport async function internalIpV6() {\n\tconst result = await getIp();\n\tif (isIPv6(result)) {\n\t\treturn result;\n\t}\n}\n\nexport async function internalIpV4() {\n\tconst result = await getIp();\n\tif (isIPv4(result)) {\n\t\treturn result;\n\t}\n}\n\nexport function internalIpV6Sync() {}\n\nexport function internalIpV4Sync() {}\n"],"mappings":"AAAA;AACA,SAAQA,MAAM,QAAO,SAAS;AAC9B,SAAQC,MAAM,EAAEC,MAAM,QAAO,OAAO;AAEpC,MAAMC,KAAK,GAAG,MAAAA,CAAO;EAACC,WAAW,GAAG;AAAK,CAAC,GAAG,CAAC,CAAC,KAAK;EACnD,IAAI;IACH,MAAMC,cAAc,GAAG,IAAIC,iBAAiB,CAAC;MAACC,UAAU,EAAE;IAAE,CAAC,CAAC;IAE9DF,cAAc,CAACG,iBAAiB,CAAC,EAAE,CAAC;IACpCH,cAAc,CAACI,WAAW,CAACJ,cAAc,CAACK,mBAAmB,CAACC,IAAI,CAACN,cAAc,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC;IAE7F,MAAM;MAACO;IAAS,CAAC,GAAG,MAAMZ,MAAM,CAACK,cAAc,EAAE,cAAc,EAAE;MAChEQ,OAAO,EAAE;IACV,CAAC,CAAC;IAEFR,cAAc,CAACS,KAAK,CAAC,CAAC;IAEtB,IAAI,EAAEF,SAAS,IAAIA,SAAS,CAACA,SAAS,CAAC,EAAE;MACxC;IACD;IAEA,MAAMG,MAAM,GAAGH,SAAS,CAACA,SAAS,CAACI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAChD,IAAI,CAACD,MAAM,CAACE,QAAQ,CAAC,QAAQ,CAAC,EAAE;MAC/B,OAAOF,MAAM;IACd;IAEA,IAAIX,WAAW,EAAE;MAChB;IACD;IAEA,MAAMc,YAAY,GAAG,MAAMC,SAAS,CAACC,YAAY,CAACC,gBAAgB,CAAC,CAAC;IACpE,MAAMC,gBAAgB,GAAG,IAAIC,GAAG,CAACL,YAAY,CAACM,GAAG,CAAC,CAAC;MAACC;IAAI,CAAC,KAAKA,IAAI,CAAC,CAAC;IAEpE,MAAMC,WAAW,GAAG,CAAC,CAAC;IACtB,IAAIJ,gBAAgB,CAACK,GAAG,CAAC,YAAY,CAAC,EAAE;MACvCD,WAAW,CAACE,KAAK,GAAG,IAAI;IACzB,CAAC,MAAM,IAAIN,gBAAgB,CAACK,GAAG,CAAC,YAAY,CAAC,EAAE;MAC9CD,WAAW,CAACG,KAAK,GAAG,IAAI;IACzB,CAAC,MAAM;MACN;IACD;IAEA,MAAMC,WAAW,GAAG,MAAMX,SAAS,CAACC,YAAY,CAACW,YAAY,CAACL,WAAW,CAAC;IAC1E,KAAK,MAAMM,KAAK,IAAIF,WAAW,CAACG,SAAS,CAAC,CAAC,EAAE;MAC5CD,KAAK,CAACE,IAAI,CAAC,CAAC;IACb;IAEA,OAAO,MAAM/B,KAAK,CAAC;MAACC,WAAW,EAAE;IAAI,CAAC,CAAC;EACxC,CAAC,CAAC,MAAM,CAAC;AACV,CAAC;AAED,OAAO,eAAe+B,YAAYA,CAAA,EAAG;EACpC,MAAMpB,MAAM,GAAG,MAAMZ,KAAK,CAAC,CAAC;EAC5B,IAAID,MAAM,CAACa,MAAM,CAAC,EAAE;IACnB,OAAOA,MAAM;EACd;AACD;AAEA,OAAO,eAAeqB,YAAYA,CAAA,EAAG;EACpC,MAAMrB,MAAM,GAAG,MAAMZ,KAAK,CAAC,CAAC;EAC5B,IAAIF,MAAM,CAACc,MAAM,CAAC,EAAE;IACnB,OAAOA,MAAM;EACd;AACD;AAEA,OAAO,SAASsB,gBAAgBA,CAAA,EAAG,CAAC;AAEpC,OAAO,SAASC,gBAAgBA,CAAA,EAAG,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}